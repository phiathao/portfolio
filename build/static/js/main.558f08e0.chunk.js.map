{"version":3,"sources":["components/Project/ProjectItem.js","components/Project/Projects.js","components/AdminPage/AdminProjectItem.js","components/AdminPage/AdminProjectList.js","components/AdminPage/AdminPage.js","components/App/App.js","registerServiceWorker.js","redux/sagas/rootSaga.js","index.js"],"names":["ProjectItem","itemImage","backgroundSize","backgroundRepeat","backgroundPosition","height","maxHeight","projectImage","projectWebsite","projectGithub","projectTag","projectDate","projectDescription","_this2","this","props","project","thumbnail","react_default","a","createElement","CardMedia_default","style","image","website","Button_default","color","onClick","window","open","rel","github","tag","date_completed","description","Card_default","className","CardContent_default","name","CardActionArea_default","Component","Projects","dispatch","type","reduxState","projects","map","components_Project_ProjectItem","key","id","connect","AdminProjectItem","handleDelete","_this","payload","AdminProjectList","AdminPage_AdminProjectItem","AdminPage","state","tag_id","handleChange","event","setState","Object","objectSpread","defineProperty","target","value","handleTag","handleSubmit","preventDefault","Link","to","onSubmit","property","i","TextField_default","label","InputLabelProps","shrink","onChange","margin","select","tags","MenuItem_default","AdminPage_AdminProjectList","theme","createMuiTheme","palette","primary","blue","secondary","teal","App","HashRouter","styles","Route","path","exact","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","fetchProjects","fetchTags","addProject","deleteProject","rootSaga","projectList","regenerator_default","wrap","_context","prev","next","call","axios","get","sent","t0","stop","_marked","tagsList","_context2","_marked2","action","_context3","post","data","alert","_marked3","_context4","delete","concat","_marked4","_context5","takeEvery","_marked5","sagaMiddleware","createSagaMiddleware","storeInstance","createStore","combineReducers","arguments","length","undefined","applyMiddleware","logger","run","ReactDOM","render","es","store","components_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.558f08e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import { connect } from 'react-redux';\nimport './ProjectItem.css';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\n\n\n\nclass ProjectItem extends Component {\n    itemImage = {\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        height: '200px',\n        maxHeight: '300px'\n    }\n    render() {\n        let projectImage;\n        let projectWebsite;\n        let projectGithub;\n        let projectTag;\n        let projectDate;\n        let projectDescription;\n        if (this.props.project.thumbnail !== null) { // check if there is image\n            projectImage = <CardMedia style={this.itemImage} image={this.props.project.thumbnail}/>\n        }\n        if (this.props.project.website !== null) { // check if there a website\n            projectWebsite = <li><Button color=\"primary\" onClick={() => window.open(this.props.project.website, \"_blank\")} rel=\"noopener noreferrer\">Website</Button></li>\n        }\n        if (this.props.project.github !== ''){\n            projectGithub = <li><Button color=\"primary\" onClick={() => window.open(this.props.project.github, \"_blank\")} rel=\"noopener noreferrer\">Github</Button></li>\n        }\n        if (this.props.project.tag !== ''){\n            projectTag = <li>{this.props.project.tag}</li>\n        }\n        if (this.props.project.date_completed !== ''){\n            projectDate = <p>{this.props.project.date_completed}</p>\n        }\n        if (this.props.project.description !== ''){\n            projectDescription = <div><h4>Description</h4><p>{this.props.project.description}</p></div>\n        }\n        return (\n            <Card className='cardItem'>\n                <CardContent className=\"name\">{this.props.project.name}</CardContent>\n                {projectImage}\n                <div className=\"detail\">\n                    {projectGithub}\n                    {projectWebsite}\n                    {projectTag}\n                </div>\n                <CardActionArea>\n                <CardContent>\n                    {projectDescription}\n                    {projectDate}\n                </CardContent>\n                </CardActionArea>\n            </Card>\n        )\n    }\n}\n\nexport default ProjectItem;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ProjectItem from './ProjectItem';\n\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nclass Projects extends Component {\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_PROJECTS' });\n      }\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Phia Thao</h1>\n                {\n                    this.props.reduxState.projects.map(project => {\n                        return <ProjectItem key={project.id} project={project} />\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(Projects);","import React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\n\n\nclass AdminProjectItem extends Component {\n    handleDelete = (id)=>{\n        this.props.dispatch({type: 'DELETE_PROJECT', payload: id})\n    }\n    render() {\n        return (\n            <Card className=\"CardItem\">\n                <CardActionArea>\n                <CardContent>\n                    <ul>\n                        <li>Name: {this.props.project.name}</li>\n                        <li>Github: {this.props.project.github}</li>\n                        <li>Tag: {this.props.project.tag}</li>\n                        <li>Date Completed: {this.props.project.date_completed}</li>\n                        <li>Thumbnail: {this.props.project.thumbnail}</li>\n                        <li>Description: {this.props.project.description}</li>\n                    </ul>\n                </CardContent>\n                </CardActionArea>\n                <Button className=\"classButton\" onClick={()=>this.handleDelete(this.props.project.id)}>Delete</Button>\n            </Card>\n        )\n    }\n}\n\nexport default connect()(AdminProjectItem);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport AdminProjectItem from './AdminProjectItem'\n\nclass AdminProjectList extends Component {\n    render() {\n        return (\n            <div>\n                {this.props.reduxState.projects.map(project => {\n                    return <AdminProjectItem key={project.id} project={project} />\n                })}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps)(AdminProjectList);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport AdminProjectList from './AdminProjectList';\nimport './Admin.css';\nimport { Link } from 'react-router-dom';\n\nclass AdminPage extends Component {\n    state = {\n        project: {\n            name: '',\n            description: '',\n            thumbnail: '',\n            website: '',\n            github: '',\n            date_completed: '',\n            tag_id: ''\n        }\n    }\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_TAGS' });\n        this.props.dispatch({ type: 'FETCH_PROJECTS' });\n    }\n    handleChange = (event) => {\n        this.setState({\n            project: {\n                ...this.state.project,\n                [event.target.name]: event.target.value\n            }\n        })\n    }\n    handleTag = (event) => {\n        this.setState({\n            project: {\n                ...this.state.project,\n                tag_id: event.target.value\n            }\n        })\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.dispatch({ type: 'ADD_PROJECT', payload: this.state.project })\n        this.setState({\n            project: {\n                name: '',\n                description: '',\n                thumbnail: '',\n                website: '',\n                github: '',\n                date_completed: '',\n                tag_id: ''\n            }\n        })\n    }\n    handleHistory(){\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Admin</h1>\n                <Link to=\"/\"><Button>View Project</Button></Link>\n                <form onSubmit={this.handleSubmit}>\n                    {[\"name\", \"description\", \"thumbnail\", \"website\", \"github\", \"date_completed\"].map((property, i) => { //input field\n                        if (property === \"date_completed\") {\n                            return (\n                                <TextField\n                                    key={i}\n                                    label={property}\n                                    name={property}\n                                    className=\"textField\"\n                                    InputLabelProps={{ shrink: true, }}\n                                    type=\"date\"\n                                    value={this.state.project[property]}\n                                    onChange={this.handleChange}\n                                    margin=\"normal\"\n                                />\n                            )\n                        } else {\n                            return (\n                                <TextField\n                                    key={i}\n                                    label={property}\n                                    name={property}\n                                    type=\"text\"\n                                    className=\"textField\"\n                                    value={this.state.project[property]}\n                                    onChange={this.handleChange}\n                                    margin=\"normal\"\n                                />\n                            )\n                        }\n                    })}\n                    <br />\n                    <TextField // selection field\n                        id=\"tag\"\n                        select\n                        label=\"Tag\"\n                        className=\"textField\"\n                        value={this.state.project.tag_id}\n                        onChange={this.handleTag}\n                        margin=\"normal\"\n                    >\n                        {this.props.reduxState.tags.map(tag => { // map to show selection\n                            return (\n                                <MenuItem key={tag.id} value={tag.id} className=\"textField\">\n                                    {tag.name}\n                                </MenuItem>\n                            )\n                        })}\n                    </TextField>\n                    <br />\n                    <Button type=\"submit\" value=\"Submit\">Submit</Button>\n                </form>\n                <AdminProjectList />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = reduxState => ({\n    reduxState,\n});\n\nexport default connect(mapStateToProps)(AdminPage);","import React, { Component } from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { blue, teal } from '@material-ui/core/colors';\nimport './App.css';\nimport 'typeface-roboto';\nimport Projects from '../Project/Projects';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport AdminPage from '../AdminPage/AdminPage';\n\n//theme\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: teal,\n  }\n});\n\nclass App extends Component {\n  // Renders the entire app on the DOM\n  render() {\n    return (\n      <Router>\n        <MuiThemeProvider theme={theme}>\n          <Route path='/' exact component={Projects} />\n          <Route path='/adminControl' component={AdminPage} />\n        </MuiThemeProvider>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { call, put as dispatch, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// Create the rootSaga generator function\n\n// get project\nfunction* fetchProjects(){\n    try{\n        const projectList = yield call(axios.get, '/api/projects');\n        yield dispatch({type: 'SET_PROJECTS', payload: projectList});\n    }catch(error){\n        console.log(error);\n    }\n}\n\n//get tag\nfunction* fetchTags(){\n    try{\n        const tagsList = yield call(axios.get, '/api/projects/tags');\n        yield dispatch({type: 'SET_TAGS', payload: tagsList});\n    }catch(error){\n        console.log(error);\n    }\n}\n\n//add project\nfunction* addProject(action){\n    try{\n        const response = yield call(axios.post, '/api/projects', action.payload);\n        if (response.data === 'error'){ // alert if fail to add projects\n            alert('Project did not get submited');\n        }\n        yield dispatch({type: 'FETCH_PROJECTS'});\n    }catch(error){\n        console.log(error);\n    }\n}\n\n//delete project\nfunction* deleteProject(action){\n    try{\n        yield call(axios.delete, `/api/projects/delete/${action.payload}`);\n        yield dispatch({type: 'FETCH_PROJECTS'});\n    }catch(error){\n        console.log(error)\n    }\n}\nfunction* rootSaga() {\n    yield takeEvery('FETCH_PROJECTS', fetchProjects);\n    yield takeEvery('FETCH_TAGS', fetchTags);\n    yield takeEvery('ADD_PROJECT', addProject);\n    yield takeEvery('DELETE_PROJECT', deleteProject);\n}\n\nexport default rootSaga;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n// Provider allows us to use redux within our react app\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n// Import saga middleware\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './redux/sagas/rootSaga';\n\n// Create sagaMiddleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Used to store projects returned from the server\nconst projects = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_PROJECTS':\n            return action.payload.data;\n        default:\n            return state;\n    }\n}\n\n// Used to store the project tags (e.g. 'React', 'jQuery', 'Angular', 'Node.js')\nconst tags = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_TAGS':\n            return action.payload.data;\n        default:\n            return state;\n    }\n}\n\n// Create one store that all components can use\nconst storeInstance = createStore(\n    combineReducers({\n        projects,\n        tags,\n    }),\n    // Add sagaMiddleware to our store\n    applyMiddleware(sagaMiddleware, logger),\n);\n\n// Pass rootSaga into our sagaMiddleware\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, \n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}